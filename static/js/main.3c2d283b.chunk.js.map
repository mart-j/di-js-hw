{"version":3,"sources":["components/featureImportance/FeatureImportance.tsx","components/nanStabilityAnalysis/NanStabilityAnalysis.tsx","components/stabilityAnalysis/StabilityAnalysis.tsx","components/valueDistribution/ValueDistribution.tsx","App.tsx","helpers/helpers.ts","index.tsx","components/stabilityAnalysis/StabilityAnalysis.module.scss","components/valueDistribution/ValueDistribution.module.scss","App.module.scss","components/featureImportance/FeatureImportance.module.scss"],"names":["FeatureDistribution","showChartHandler","chartData","showChart","horizontalState","labels","map","item","name","datasets","backgroundColor","context","index","dataIndex","1","2","3","stabilityGroup","data","importance","className","styles","featureImportanceWrapper","height","options","title","display","text","fontSize","legend","scales","yAxes","ticks","mirror","z","fontColor","onClick","event","element","_index","onHover","e","target","style","cursor","overlay","NanStabilityAnalysis","selectedPosition","distributionGraphState","Object","keys","nanStabilityAnalysis","yBaseline","yProduction","chartWrapper","position","StabilityAnalysis","xLeftEdge","label","psi","toFixed","buttonWrapper","ValueDistribution","closeChartHandler","useState","toggleChart","setToggleChart","navigator","classNames","stability","active","closeButton","positionName","App","setChartData","setShowChart","setSelectedPostition","useEffect","featureImportanceData","FEATURE_IMPRTANCE","metrics","featureImportance","names","i","getFeatureImportanceData","FEATURE_IMPORTANCE","featureStabilityData","FEATURE_STABILITY","parameterStability","productionModelMetrics","entries","stabilityAnalysis","num","Number","Math","max","getFeatureStabitityData","filteredFSData","filteredFIData","merged","_","merge","find","orderBy","mergeData","container","valueDistributionWrapper","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.3c2d283b.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { HorizontalBar } from 'react-chartjs-2';\nimport { ChartData } from '../../types/types';\nimport styles from './FeatureImportance.module.scss';\n\ninterface Props {\n  showChartHandler: (index: number) => void;\n  chartData: ChartData[];\n  showChart: boolean;\n}\n\nconst FeatureDistribution: FC<Props> = ({ showChartHandler, chartData, showChart }) => {\n  const horizontalState = {\n    labels: chartData.map((item) => item.name),\n    datasets: [\n      {\n        backgroundColor: (context: { dataIndex: number }) => {\n          const index = context.dataIndex;\n          const backgroundColor: { [key: number]: string } = {\n            1: '#0095ffcf',\n            2: '#ffb100cf',\n            3: '#ff200094',\n          };\n          return backgroundColor[chartData[index].stabilityGroup];\n        },\n        data: chartData.map((item) => item.importance),\n      },\n    ],\n  };\n\n  return (\n    <div className={styles.featureImportanceWrapper}>\n      <HorizontalBar\n        data={horizontalState}\n        height={300}\n        options={{\n          title: {\n            display: true,\n            text: 'Feature Importance',\n            fontSize: 20,\n          },\n          legend: {\n            display: false,\n          },\n          scales: {\n            yAxes: [{ ticks: { mirror: false, fontSize: 10, z: 2, fontColor: '#0f0f0ff0' } }],\n          },\n          \n          onClick: (event: Event, element: { _index: number }[]) => {\n            if (element[0]) {\n              const index = element[0]._index;\n              showChartHandler(index);\n            }\n          },\n\n          onHover: (e: MouseEvent, element: { _index: number }[]) => {\n            const target = e.target as HTMLCanvasElement;\n            if (element[0]) {\n              target.style.cursor = 'pointer';\n            } else {\n              target.style.cursor = 'auto';\n            }\n          },\n        }}\n      />\n      {showChart && <div className={styles.overlay}></div>}\n    </div>\n  );\n};\nexport default FeatureDistribution;\n","import React, { FC } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { ChartData } from '../../types/types';\nimport styles from './NanStabilityAnalysis.module.scss';\n\n\ninterface Props {\n  selectedPosition: ChartData;\n}\n\nconst NanStabilityAnalysis: FC<Props> = ({ selectedPosition }) => {\n\n  const distributionGraphState = {\n    labels: Object.keys(selectedPosition.nanStabilityAnalysis),\n    datasets: [\n      {\n        backgroundColor: [ '#ec3929d4', '#dfed39c7'],\n        data: [selectedPosition.nanStabilityAnalysis.yBaseline[0],\n          selectedPosition.nanStabilityAnalysis.yProduction[0],\n        ],\n      },\n    ],\n  };\n\n  return (\n        <div className={styles.chartWrapper}>\n            <Bar\n                data={distributionGraphState}\n                options={{\n                  title: {\n                    display: true,\n                    text: 'Nan Stability Analysis',\n                    fontSize: 20,\n                    position: 'bottom',\n                  },\n                  legend: {\n                    display: false,\n                  },\n                }}\n            />\n        </div>\n  );\n};\nexport default NanStabilityAnalysis;\n","import React, { FC } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { ChartData } from '../../types/types';\nimport styles from './StabilityAnalysis.module.scss';\n\n\ninterface Props {\n  selectedPosition: ChartData\n}\n\nconst StabilityAnalysis: FC<Props> = ({ selectedPosition }) => {\n\n  const distributionGraphState = {\n    labels: selectedPosition.xLeftEdge,\n    datasets: [\n      {\n        label: 'yBaseline',\n        backgroundColor: '#e4ff00',\n        data: selectedPosition.yBaseline,\n      },\n      {\n        label: 'yProduction',\n        backgroundColor: '#ec3929d4',\n        data: selectedPosition.yProduction,\n      },\n    ],\n  };\n\n  return (\n    <div className={styles.chartWrapper}>\n      <div className={styles.psi}>\n       {`Population stability index: ${selectedPosition.psi.toFixed(2)}`}\n      </div>\n      <div className={styles.buttonWrapper}>\n      </div>\n      <Bar\n        data={distributionGraphState}\n        options={{\n          title: {\n            display: true,\n            text: 'Stability Analysis',\n            fontSize: 20,\n            position: 'bottom',\n          },\n          legend: {\n            display: true,\n            position: 'right',\n          },\n        }}\n      />\n    </div>\n  );\n};\nexport default StabilityAnalysis;\n","import React, { FC, useState } from 'react';\nimport classNames from 'classnames';\nimport { ChartData } from '../../types/types';\nimport NanStabilityAnalysis from '../nanStabilityAnalysis/NanStabilityAnalysis';\nimport StabilityAnalysis from '../stabilityAnalysis/StabilityAnalysis';\nimport styles from './ValueDistribution.module.scss';\n\ninterface Props {\n  selectedPosition: ChartData;\n  closeChartHandler: () => void;\n}\n\nconst ValueDistribution: FC<Props> = ({ selectedPosition, closeChartHandler }) => {\n\n  const [toggleChart, setToggleChart] = useState(false);\n\n  return (\n    <div className={styles.chartWrapper}>\n      <div>\n        <div className={styles.buttonWrapper}>\n          <div></div>\n          <div>\n\n            <div className={styles.navigator}>\n              <div\n              onClick={() => setToggleChart(false)}\n                className={classNames({\n                  [styles.stability]: true,\n                  [styles.active]: !toggleChart,\n                })}\n              >\n                Stability\n              </div>\n               <div\n               onClick={() => setToggleChart(true)}\n                className={classNames({\n                  [styles.stability]: true,\n                  [styles.active]: toggleChart,\n                })}\n              >\n                Nan Stability\n              </div>\n            </div>\n          </div>\n          <div>\n            <button onClick={closeChartHandler} className={styles.closeButton}>\n              X\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {toggleChart ? (\n        <NanStabilityAnalysis selectedPosition={selectedPosition} />\n      ) : (\n          <StabilityAnalysis selectedPosition={selectedPosition} />\n      )}\n      <div className={styles.positionName}>{selectedPosition.name}</div>\n    </div>\n  );\n};\nexport default ValueDistribution;\n","import React, { useEffect, useState } from 'react';\nimport FEATURE_IMPORTANCE from './data/feature_importance.json';\nimport FEATURE_STABILITY from './data/feature_stability.json';\nimport FeaturImportance from './components/featureImportance/FeatureImportance';\nimport ValueDistribution from './components/valueDistribution/ValueDistribution';\nimport { getFeatureImportanceData, getFeatureStabitityData, mergeData } from './helpers/helpers';\nimport { ChartData } from './types/types';\nimport styles from './App.module.scss';\n\nconst App = () => {\n  const [chartData, setChartData] = useState<ChartData[]>();\n  const [showChart, setShowChart] = useState(false);\n  const [selectedPosition, setSelectedPostition] = useState<ChartData>();\n\n  useEffect(() => {\n    const featureImportanceData = getFeatureImportanceData(FEATURE_IMPORTANCE);\n    const featureStabilityData = getFeatureStabitityData(FEATURE_STABILITY);\n    setChartData(mergeData(featureStabilityData, featureImportanceData));\n  }, []);\n\n  const showChartHandler = (index: number) => {\n    setSelectedPostition(chartData![index]);\n    setShowChart(true);\n  };\n\n  const closeChartHandler = () => {\n    setShowChart(false);\n  };\n\n  return (\n    <div className={styles.container}>\n      {chartData && (\n        <div className={styles.featureImportanceWrapper}>\n          <FeaturImportance\n            chartData={chartData}\n            showChartHandler={showChartHandler}\n            showChart={showChart}\n          />\n        </div >\n      )}\n      {\n        selectedPosition && showChart &&\n        <div className={styles.valueDistributionWrapper}>\n          < ValueDistribution\n            closeChartHandler={closeChartHandler}\n            selectedPosition={selectedPosition} />\n        </div>\n      }\n\n    </div>\n  );\n};\nexport default App;\n","import _ from 'lodash';\nimport * as type from '../types/types';\n\nexport const getFeatureStabitityData = ( FEATURE_STABILITY: type.FeatureStabilityType ) => {\n  const { data: { productionModelMetrics: { parameterStability } } } = FEATURE_STABILITY;\n  const parameterStabilityArr = Object.entries(parameterStability)\n    .map(\n      (item) => {\n\n        return {\n          name: item[0],\n          yBaseline: item[1].stabilityAnalysis.yBaseline,\n          yProduction: item[1].stabilityAnalysis.yProduction,\n          xLeftEdge: item[1].stabilityAnalysis.xLeftEdge.map((num) =>\n            Number(num.toFixed(2)),\n          ),\n          psi: item[1].stabilityAnalysis.psi[0],\n          stabilityGroup: Math.max(\n            item[1].nanStabilityAnalysis.stabilityGroup[0],\n            item[1].stabilityAnalysis.stabilityGroup[0],\n          ),\n          nanStabilityAnalysis: {\n            yProduction: item[1].nanStabilityAnalysis.yProduction,\n            yBaseline: item[1].nanStabilityAnalysis.yBaseline,\n          },\n        };\n      },\n    );\n\n  return parameterStabilityArr;\n};\n\n\nexport const getFeatureImportanceData = ( FEATURE_IMPRTANCE: type.FeatureImportanceType ) => {\n  const { data: { featureImportance: { metrics } } } = FEATURE_IMPRTANCE;\n  const { names, importance } = metrics;\n\n  return names.map((name, i) => {\n    return { name, importance: importance[i] };\n  });\n};\n\n\nexport const mergeData = ( \n  filteredFSData: type.FilteredFSData[],\n  filteredFIData: type.FilteredFIData[]) => {\n  const merged = _.map(filteredFSData, (item) => {\n    return _.merge(item, _.find(filteredFIData, { name: item.name }));\n  });\n  return _.orderBy(merged, ['type', 'importance'], ['asc', 'desc']);\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"psi\":\"StabilityAnalysis_psi__3dbHi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chartWrapper\":\"ValueDistribution_chartWrapper__35f-w\",\"positionName\":\"ValueDistribution_positionName__T1Tnh\",\"switchButton\":\"ValueDistribution_switchButton__2Exnz\",\"buttonWrapper\":\"ValueDistribution_buttonWrapper__3lzJr\",\"navigator\":\"ValueDistribution_navigator__S5lcM\",\"stability\":\"ValueDistribution_stability__2PkoK\",\"nanStability\":\"ValueDistribution_nanStability__LlEqq\",\"active\":\"ValueDistribution_active__1rCXL\",\"closeButton\":\"ValueDistribution_closeButton__2x2ZL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__eSJ6i\",\"valueDistributionWrapper\":\"App_valueDistributionWrapper__3PiVl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"featureImportanceWrapper\":\"FeatureImportance_featureImportanceWrapper__3yYer\",\"overlay\":\"FeatureImportance_overlay__meU-i\"};"],"sourceRoot":""}